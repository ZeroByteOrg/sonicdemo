#!/usr/bin/php
<?php

$rest_index = null;
$opts = getopt('4b', [], $rest_index);
$filenames = array_slice($argv, $rest_index);

if (isset($filenames[0]))
	define("FILENAME", $filenames[0]);
else
	define("FILENAME", 'kenstage.vgm');
define("OFFSET", 0x34);
define("MAXPAUSE",0x7F); // testing whether any pause frames of $7F exist.
//define("MAXPAUSE",0x7E); // pause of 0x7e = end of data stream
define("PERLINE",16); // # of data bytes to print per line
define("TICKSPERFRAME",735);
if (isset($filenames[1]))
	define ("OUTFILENAME", $filenames[1]);
else
	define("OUTFILENAME", 'BGM.ZSM');

$commands=array(
  0x63 => 0,	// delay 0x0000
  0x66 => 0xff, // end of song
  0x54 => 0x01, // YM2151 message
);

// For R39, use the 3.5MHz table (name it as $note)

// C#,D,D#,x,E,F,F#,x,G,G#,A,x,A#,B,C
if (isset($opts['4'])) {
$note = array( // values for when YM2151 is at 4MHz
	311.13, 329.63, 349.23, 0,  // c# d  d#  x
	369.99, 392.00, 415.30, 0,  // e  f  f#  x
	440.00, 466.16, 493.88, 0,  // g  g# a   x
	523.25, 554.37, 587.33, 0); // a# b  c   x   
}
else {
$note = array( // values for when YM2151 is at 3.5MHz
	277.18, 293.66, 311.13, 0,  // c# d  d#  x
	329.63, 349.23, 369.99, 0,  // e  f  f#  x
	392.00, 415.30, 440.00, 0,  // g  g# a   x
	466.16, 493.88, 523.25, 0); // a# b  c   x
}

// LUT for converting AY volume register into VERA PSG equivalent %max
$PSGvolume = array( 0,1,2,3,4,8,12,16,24,28,34,40,45,51,58,63);
		
		
// from fmtoy, 2203 uses this to make the notes:
//    uint8_t octave = (69 + 12 * log2(pitch / 440.0)) / 12 - 1;
//    uint16_t fnum = (144 * pitch * (1 << 19) / channel->chip->clock) / (1 << (octave - 1));

function freq($oct,$code) {
	global $note;

	return (round($note[$code] * pow(2,$oct-4),2));
}

function psgfnum($ayfnum) {
	global $ayclock;
	if($ayfnum < 1) { return 0; }
	$freq = $ayclock / (16 * $ayfnum); // per AY-3-8910 datasheet
printf("   ----- Frequency calculated as %f\n",$freq);
	// the magic number 0.3725... is computed from the VERA docs
	return round($freq / 0.37252903, 0, PHP_ROUND_HALF_UP);
}

function snfnum($ayfnum) {
	$freq = intdiv(3579545, 32); // hardwired because SEGA / Deflemask
	if($ayfnum > 0) { $freq = intdiv($freq,$ayfnum); }
	return round($freq / 0.37252903, 0, PHP_ROUND_HALF_UP);
}

function getcode ($freq) {
	global $note;
	$ymoct = 0;
	$ymc = 0;
	$ymmin = 9999999;
	$bestOct = 0;
	$bestC   = 0;
	while ($ymoct < 8) {
		for ($ymc=0;$ymc<15;$ymc++) {
			if ($note[$ymc]!=0) {
				$dif = abs(freq($ymoct,$ymc)-$freq);
				if ($dif < $ymmin) {
					$ymmin = $dif;
					$bestOct = $ymoct;
					$bestC   = $ymc;
				};
				if ($dif > $ymmin) { break 2; };
			};
		};
		$ymoct++;
	};
//	printf("0x%04x", ($bestC & 0x0f) | ($bestOct << 4)); // omit DT for now.
	return (($bestC & 0x0f) | ($bestOct << 4));
};

// prints out 8 binary bits as 1s and 0s.
function tobin($val) {
	$s = "";
	for ($i=7 ; $i >= 0 ; $i--) {
		if ($val >> $i & 0x01 == 1) { $s = $s . "1"; }
		else { $s = $s . "0"; }
		if ($i == 4) { $s = $s . " "; }
	}
	return $s;
}


// --------- above is the set of LUTs / magic numbers I used for OPL->OPM freq. conversion.


$opnfreqs = array( 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 ); // 0x80 is an invalid value used as a flag indicating "not set"

//$segafreqs = array ( 617, 653, 692, 733, 777, 823, 872, 924, 979, 1037, 1099, 1164 );
////$segafreqs = array ( 644, 682, 723, 766, 811, 859, 910, 965, 1022, 1083, 1147, 1215 ); // Deflemask uses these values for KC

//$kc = array ( 0xe, 0, 1, 2, 4, 5, 6, 8, 9, 0xa, 0xc, 0xd ); // do the above notes even map the same way? Nobody even says....


function writepause1() {
  global $songdata;
  global $ticks;
  global $bytes;
  
  $frames = intdiv($ticks,TICKSPERFRAME);
  $ticks  = $ticks % TICKSPERFRAME;
  while ($frames >= MAXPAUSE) {
	  array_push($songdata,0,MAXPAUSE);
	  $frames -= MAXPAUSE;
	  $bytes  += 2;
  }
  if ($frames > 0) {
	array_push($songdata,0,$frames);
	$bytes += 2;
  }
}

function generate1($c, $a, $d) {
	global $songdata;
	global $ticks;
	global $totalticks;
	global $longest;
	global $bytes;
	global $maxatbyte;
	global $i;

	writepause();
	$totalticks += $ticks;
	if ($ticks > $longest) {
		// track what the longest pause was over the entire stream
		$longest = $ticks;
		$maxatbyte = $i-3;
	};
	array_push($songdata,$c,$a,$d);
	$bytes += 3;
if ($c == 2) { printf("ZSM WRITE: 0x02 0x%02x 0x%02x\n",$a,$d); }
};

function flushymbuffer() {
  global $songdata;
  global $ymbuffer;
  global $bytes;

  $n = intdiv(sizeof($ymbuffer),2);
  while ($n > 63) {
  		array_push($songdata,63 | (1<<6)); // 1<<6 = set the "YM" flag in the cmd byte
		$songdata = array_merge($songdata,array_slice($ymbuffer,0,63*2));
		$ymbuffer = array_slice($ymbuffer,63*2);
		$bytes += 63*2+1;
		$n -= 63;
  }
  if ($n > 0) {
		array_push($songdata,$n | (1<<6));
		$songdata = array_merge($songdata,$ymbuffer);
		$bytes += $n * 2 + 1;
  }
  $ymbuffer = array();
}

$num_maxpause = 0;
$biggest_pause = 0;
function writepause() {
  global $songdata;
  global $ticks;
  global $bytes;
  global $ymbuffer;
  global $num_maxpause;
  global $biggest_pause;

  $frames = intdiv($ticks,TICKSPERFRAME);
  if ($frames > $biggest_pause) { $biggest_pause = $frames; }
  $ticks  = $ticks % TICKSPERFRAME;
  if ($frames == 0) { return; }

// flushymbuffer();
  while ($frames >= MAXPAUSE) {
	  array_push($songdata,MAXPAUSE | 0x80); // |0x80 = set the "pause" flag in the cmd byte
	  $frames -= MAXPAUSE;
	  $bytes++;
	  $num_maxpause++;
  }
  if ($frames > 0) {
	array_push($songdata,$frames | 0x80);
	$bytes++;
  }
}

function generate($c, $a, $d) {
	global $songdata;
	global $ticks;
	global $totalticks;
	global $longest;
	global $bytes;
	global $maxatbyte;
	global $i;
	global $ymbuffer;

	$totalticks += $ticks;
	if ($ticks > $longest) {
		// track what the longest pause was over the entire stream
		$longest = $ticks;
		$maxatbyte = $i-3;
	}
	writepause();
	switch ($c) {
	case 1:
		array_push($ymbuffer,$a,$d);
		break;
	case 2:
		array_push($songdata,$a,$d);
		$bytes += 2;
printf("ZSM WRITE: 0x02 0x%02x 0x%02x\n",$a,$d);
		break;
	default:
		printf("Illegal command ID %d written at VGM offset 0x%06x\n",$c,$i);
		exit;
		break;	
	}
}

function wait($t)
{
	global $ticks;
	global $songdata;
	global $ymbuffer;
	
	$ticks += $t;
	if (intdiv($ticks,TICKSPERFRAME) > 0) {flushymbuffer();}
}

function out_asm()
{
	global $songdata;
	global $bytes;
	
	print "songdata";
	for ($j=0;$j<sizeof($songdata);$j++) {
	  if ($j%PERLINE != 0) {
		print ",";
	  } else {
		print "\n\tbyte ";
	  };
	  printf('$%02x',$songdata[$j]);
	};
	print "\n";
}

function out_zsm($ofile)
{
	global $songdata;
	$of = fopen($ofile, "w+b");
	fwrite($of,"zm");
	fwrite($of,pack('C*',...$songdata));
	fclose($of);
}

function translate_sn($d)
{
	// Ti SN76489 PSG from Sega Genesis and many others
	global $snlatch;
	global $sninitialized;
	global $psgshadow;
	global $i;
	
	$voice = 0;
	$value = 0;
	$freq = 0;
	
	if ($sninitialized === false) {
		generate(2,3,0x3f);
		generate(2,7,0x3f);
		generate(2,11,0x3f);
		generate(2,15,0xc0);
		generate(2,2,0);
		generate(2,6,0);
		generate(2,10,0);
		generate(2,14,0);
		$sninitialized = true;
	}
	
	// single-byte write. (set volume, set noise freq, or set tone LSB)
	// values with MSB clear = write the 6 MSB of the tone of the most
	// recently latched voice.
	// values with MSB set:
	// 	bits 0-3 = data
	//	bit    4 = volume/pitch select (0=pitch, 1=volume)
	//  bits 5-6 = voice select
	if ($d >= 0x80) {
		// write data to a voice & latch the voice number
		$voice = ($d & 0x60) >> 5;
		$value = $d & 0x0f;
		$snlatch[3] = $voice;
		if (($d & 0x10) > 0) {
			// set volume
			if ($value != 0x0f) {
				$value = 0x3f - ($value << 2);
				$value |= 0xc0; // enable VERA L & R balance enable bits.
			}
			else {
				$value = 0;
			}
			generate(2,4 * $voice + 2, $value);
		}
		else if ($voice != 3) {
			// set tone LSB - just latch the value
			$snlatch[$voice] = $value;
		}
		else {
			// set noise ( values 0-3 = periodic noise, 4-7 = white noise
			// Since PSG doesn't have periodic, I'm going to always use white
			switch ($value & 0x03) {
			case 0:
			case 1:
			case 2:
				break;
			case 3: // freq follows voice 2 freq setting
printf(" ---- TI SN7xxx set noise mode to follows-voice-2 mode\n");
printf(" ---- TI SN7xxx     vo2 f-lo: 0x%02x\n",$psgshadow['lo'][2]);
printf(" ---- TI SN7xxx     vo2 f-hi: 0x%02x\n",$psgshadow['hi'][2]);

				generate(2,12,$psgshadow['lo'][2]);
				generate(2,13,$psgshadow['hi'][2]);
				break;
			}
		}
	}
	else {
		// write to MSB of the most recently latched voice
		$voice = $snlatch[3];
		if ($voice < 3) {
			$value = $d << 4;
			$value |= ($snlatch[$voice] & 0x0f);
printf ("SN76489: setting freq (ch %d) to %d. (VGM ofst 0x%04x)\n",$voice,$value,$i-2);
			$freq = snfnum($value);
			generate(2,4*$voice,$freq & 0xff);
			generate(2,4*$voice+1,($freq >> 8) & 0xff);
			$psgshadow['lo'][$voice] = $freq & 0xff;
			$psgshadow['hi'][$voice] = ($freq >> 8) & 0xff;
		}
		// doing a nOP for voice 3 (noise generator)
	}
		
}

function translate_ay($a, $d, $chip)
{
	global $ayshadow;
	global $psgshadow;
	global $PSGvolume;
	
	// Registers:
	// 0, 2, 4 = fnum (A,B,C - 12-bit)
	// 6 = noise period (5-bit)
	// 7 = bits 0-2 = Tone Enable A,B,C (0=enable!!!)
	//     bits 3-5 = Noise Enabl A,B,C (0=enable!!!)
	//     bits 6-7 = IO port direction (ignore)
	// 8-A = volume 4lsb, bit 4 = M (reading this soon)
	// B-C = envelope period (16bit little endian)
	// D = ENV shape/cycle:
	//     0: hold
	//     1: Alt.
	//     2: Att
	//     3: CONT.
	// E-F = IO port data (ignore)

printf("VGM: SSG command: a=0x%02x d=0x%02x chip=%d\n",$a,$d,$chip);
	switch ($a) {
	case 0: // chan A fnum LSB
	case 1: // chan A fnum MSB
	case 2: // chan B fnum LSB
	case 3: // chan B fnum MSB
	case 4: // chan C fnum LSB
	case 5: // chan C fnum MSB
		$cha = intdiv($a,2);
		$psgcha = $cha + 3 * $chip;
		if ($a & 1 == 1) {
			$ayshadow[$chip][$cha] &= 0xff; // mask off old MSB
			$ayshadow[$chip][$cha] += $d << 8; // set new MSB
		}
		else {
			$ayshadow[$chip][$cha] &= 0x0f00; // mask off LSB
			$ayshadow[$chip][$cha] += $d; // set new LSB
		}
		$fnum   = psgfnum($ayshadow[$chip][$cha]);
		$fnumLo = ($fnum & 0xff);
		$fnumHi = ($fnum & 0x0f00) >> 8;
		if ($fnumLo != $psgshadow['lo'][$psgcha]) {
			$psgshadow['lo'][$psgcha] = $fnumLo;
			generate(2,4*$psgcha,$fnumLo);
		}
		if ($fnumHi != $psgshadow['hi'][$psgcha]) {
			$psgshadow['hi'][$psgcha] = $fnumHi;
			generate(2,4*$psgcha+1,$fnumHi);
		}
		break;
	case 6: // noise period (5 bits)
		break;
	case 7: // tone/noise enable (tone = 3lsb, 0=ena. noise=bits 3-5)
		// do an edge detect with bit-fu
		// then send initializations to PSG voices if enable bit 1->0
		// or disable voices where enable bit 0->1
		$d &= 0x3f; // mask off the data port DDR bits.
printf (" ===== SSG/AY mode register: chip=%d\n",$chip);
printf ("%27s:          d = %s\n","",tobin($d));
printf ("%27s: old ayshad = %s\n","",tobin($ayshadow[$chip][4]));
		$changes = $ayshadow[$chip][4] ^ $d; // sense which bits have changed
printf ("%27s:    changes = %s\n","",tobin($changes));
		$changes = $changes | ($changes >> 3); // detect changes to tone OR noise
printf ("%27s:    changes = %s\n","",tobin($changes));
		$changes &= 0x07; // clear the "noise" bits as the 3lsb now reflect both.
printf ("%27s:    changes = %s\n","",tobin($changes));
		$ayshadow[$chip][4] = $d;
		$d ^= 0xff; // flip all the bits for 0=false, 1=true logic for remainder of routine
printf ("%27s: modified d = %s\n","",tobin($d));
printf ("%27s: new ayshad = %s\n","",tobin($ayshadow[$chip][4]));

		for ($cha = 0 ; $cha < 3 ; $cha++) {
			if (($changes & 0x01) == 1) {
				$psgcha = $cha + (3 * $chip);
				$ena_tone  = $d & 0x01;
				$ena_noise = ($d >> 3) & 0x01;
printf ("%27s: psg channl = %d\n","new state",$psgcha);
printf ("%27s:  ena tone  = %d\n","",$ena_tone);
printf ("%27s:  ena noise = %d\n","",$ena_noise);
				if ($ena_noise > 0) {
					generate(2,4*$psgcha+3,0xc0);  // set PSG channel to noise waveform
					// HACK to get drum working - do it right later
					// (write a hard-wired freq for channels w/ Noise)
					generate(2,4*$psgcha,0x9a);
					generate(2,4*$psgcha+1,0x17); 
				}
				else if ($ena_tone > 0) {
					generate(2,4*$psgcha+3,0x3f); // Waveform = 50% duty cycle square
				}
				else {
					// channel is disabled. Mute it.
					generate(2,4*$psgcha+2,$psgshadow['v'][$psgcha]);
				}
			}
			$changes = $changes >> 1;
			$d = $d >> 1;
		}
		// TODO: see above. :)
		break;
	case 8:
	case 9:
	case 10: // volume for A,B,C
		$cha = $a-8;
		$psgcha = $cha + (3 * $chip);
		$d = $d & 0x0f;  // for now, mask off the M bit (b4) as well....
		//$d = $PSGvolume[$d];
		// if ($d > 0) { $d = 63 - 2 * (15 - $d); }
		if ($d > 0) { $d = $d * 4 + 3; }
		$active = ($ayshadow[$chip][4]) ^ 0xff;
		$active = $active >> $cha;
		$active = $active | ($active >> 3);
		$active &= 0x01;
		// if the channel is enabled for square wave tones, enable the LR bits in PSG
		if ($active > 0) {
			$d |=  0xc0; // set L+R bits enabled
		}
		$psgshadow['v'][$psgcha] = $d;
		generate(2,4*$psgcha + 2,$d);
		break;
	case 11: // env fine
	case 12: // env coarse
	case 13: // env shape/cycle
		// skipping ENV support as City Connection doesn't use it
		break;
	default:
		// ignore register
	}
}

function translate_opn($a, $d, $base, $ofst)
{
	global $opnfreqs;
	global $opnclock;
	global $cityconpatchfix;

	$a0 = $a;
	$d0 = $d;
	
//if ($a >= 0x20) { return; }
	switch ($a>>4) {
	case 0: // regs 0x00-0x1F are for the SSG portion
	case 1:
		translate_ay($a,$d,intdiv($base,3));
		return;
		break;
	case 2: // global FM parameters
		switch ($a) {
		case 0x21: 	// test register
		case 0x2d:  // set pre-scaler . (no explanation in dox)
		case 0x2e:	// set clock divider = 3 or 6 (how??)
		case 0x2f:	// set clock divider = 2
			return; // ignore
			break;
		case 0x24: // TimerA Hi
			$a = 0x10;
			break;
		case 0x25: // timerA Lo
			$a = 0x11;
			break;
		case 0x26: // TimerB
			$a = 0x12;
			break;
		case 0x27:
			// Mode register
			$mode = ($d & 0xc0) >> 6;
			$a = 0x14;
			// mask off bits 2-3 (IRQ Ena) and 6-7 (unused / CSM)
			$d = $d & 0x33;
			if ($mode > 1) { print "illegal mode setting\n"; }
			else if ($mode > 0) { print "special mode enabled\n"; }
			// TODO: anything needed for special mode?
			// for now, we'll ignore special mode.
			break;
		case 0x28:
			// keyOnOff register
			$ops = ($d & 0xf0) >> 1;
			$cha = $d & 0x07;
			if ($cha == 3) {
				printf("invalid Keyon channel %d\n", $cha);
				return;
			}
			$cha += $base;
			$a = 0x08;
			$d = $ops + $cha;
			break;
		default:
			printf("Invalid global FM register 0x%02x\n",$a);
			return;
		}
		break;
	case 3: // DT1 + MUL	
	case 4: // TL	(same)
	case 5: // RS + AR
	case 6: // AM + D1R
	case 7: // D2R
	case 8: // D1L + RR
		$cha = $a & 3;
		if ($cha == 3) {
			printf("invalid channel write 0x%02x\n",$a);
			return;
		}
		$cha += $base;
		$op = ($a >> 2) & 3;
//		// swap ops 3 & 2? (conflicting reports found on the web)
//		if ($op == 1) { $op = 2; }
//		else if ($op == 2) { $op = 1; }
		// convert OPN patch register address to OPM.
		// 0x30,0x40,0x50... -> 0x40,0x60,0x80...
		$r = (($a >> 4) - 3) * 0x20;
		$r += 0x40;
		$r += 8 * $op + $cha;
		$a = $r;
		// $d is unchanged. Neato!
		break;
	case 9: // SSG-EG (ignore)
		return;
		break;
	case 0xA:
		// A0-A2 = Fnum LSB
		// A4-A6 = Block + Freq MSB
		// 
		$cha = $a & 3;
		if ($cha == 3) {
			printf("invalid channel write 0x%02x\n",$a);
			return;
		}
		$cha += $base;
		if ($a >= 0xa8) {
			printf("ignoring special mode voice 3 setting to 0x%02x\n",$a);
			return;
		}
		if ($a < 0xa4) {
			// setting LSB - set the freq
			if ($opnfreqs[$cha] != 0x80) {
				// do some jiggery-pokery to convert to OPM KC value:
				$oct = (($opnfreqs[$cha] >> 3)-0) & 0x07;
				$oct = $oct << 4;
				$f = ($d | ($opnfreqs[$cha] << 8)) & 0x07ff;
				// The following formula appears in a snippet from the unicorn that
				// is the YM2203 application manual (not the datasheet)
				// shown in a post to a thread at vgmrips.net:
				// https://vgmrips.net/forum/viewtopic.php?f=15&t=2907
				$pitch = ($opnclock * pow(2,($oct>>4)-1) * $f) / ( 144 * (1 << 20));
printf("note: ch=%d f=%d oct=%d : pitch=%2f\n",$cha,$f,($oct>>4),$pitch);
				$a = 0x28 + $cha;
				$d = getcode($pitch);
				$opnfreqs[$cha] = 0x80;
			}
			else {
				print "VGM sets the LSB w/o first setting the MSB. Skipping note\n";
				return;
			}
		}
		else {
			// setting MSB and Block (octave)
			$opnfreqs[$cha] = $d & 0x3f;
			return;
		}
		break;
	case 0xB:	// FB & Connect ALG
printf ("====> CON debug: translate_opn(0x%02x,0x%02x,%d,0x%04x)\n",$a,$d,$base,$ofst);
		if ($a > 0xb2) {
			printf ("invalid FB / CON register 0x%02\n",$a);
			return;
		}
		$a = $a - 0x90 + $base;
		$d |= 0xc0; // since 2203 doesn't have L/R set bits here...
printf ("====> CON debug: translated  : a=0x%02x d=0x%02x\n",$a,$d);
		break;
	default:
		printf ("Unsupported register %02x\n",$a);
		return;
	}
	if ($a0 < 0x20) {
printf ("2203(%d): 0x%02x 0x%02x -> 2151: 0x%02x 0x%02x\n",$base, $a0, $d0, $a, $d);
	}
	else {
		if ($a0 == 0x28) { $opncha = $d0 & 0x0f; } else { $opncha = $a0 % 4; }
		if ($a == 0x08) { $opmcha = $d & 0x07; } else { $opmcha = $a % 8; }
printf ("2203(%d): 0x%02x 0x%02x (ch %d) -> 2151: 0x%02x 0x%02x (ch %d) (i=0x%05x)\n",$base, $a0, $d0, $opncha, $a, $d, $opmcha, $ofst);
		if ($a0 >= 0xa0 && $a0 < 0xaf) {
			printf ("       : Freq %d %4d ---> 2151 KC 0x%02x\n", $oct/16,$f,$d);
		}
	}
	if ($cityconpatchfix === false) {
		$cityconpatchfix = true;
		foreach (array(0xc1,0xc2,0xc8,0xc9,0xca,0xd0,0xd1,0xd2,0xd8,0xd9,0xda) as $FIX) {
			generate(1,$FIX,0);
		}
	}
	generate(1,$a,$d); // send the translated reg/val as if it were for YM.
}

$filesize=filesize(FILENAME);
$f = fopen(FILENAME, "r");
$binary=fread($f,$filesize);
fclose($f);

$vgm=unpack(sprintf('C%d',$filesize),$binary);

$vgm = array_values($vgm);

// calculate VGM data offset.
if (($vgm[0x09] < 2) && ($vgm[0x08] < 0x50)) {
	// versions prior to 1.5 always start data at offset 0x40
	$i = 0x40;
}
else {
	$i = OFFSET;
	$i += $vgm[OFFSET];
	$i += $vgm[OFFSET+1] << 8;
	$i += $vgm[OFFSET+2] << 16;
	$i += $vgm[OFFSET+3] << 24;
}

$opnclock = 0;
$opnclock += $vgm[0x44];
$opnclock += $vgm[0x45] << 8;
$opnclock += $vgm[0x46] << 16;
$opnclock += $vgm[0x47] << 24;
$opnclock &= 0xbfffffff; // bit 30 = dual chip flag. Ignore it.

$opn2clock = 0;
$opn2clock += $vgm[0x2c];
$opn2clock += $vgm[0x2d] << 8;
$opn2clock += $vgm[0x2e] << 16;
$opn2clock += $vgm[0x3f] << 24;

$ayclock = 0;
$ayclock += $vgm[0x74];
$ayclock += $vgm[0x75] << 8;
$ayclock += $vgm[0x76] << 16;
$ayclock += $vgm[0x77] << 24;
$ayclock &= 0xbfffffff; // bit 30 = dual chip flag. Ignore it.

printf("OPN clock rate = %d\n",$opnclock);
//$opnclock *= 2; // test
if (isset($opts['b'])) {$opnclock *= 2;} // Black Tiger
else {$opnclock *= 6;}

if ($opn2clock > 0) { $opnclock = $opn2clock; }

if ($ayclock > 0 ) { $ayclock *= 1; }
else { $ayclock = $opnclock / 3; }

// test for warp:
//$ayclock = $ayclock / 2;

$loopstart = 0x1c;
$loopstart += $vgm[0x1c];
$loopstart += $vgm[0x1d]<<8;
$loopstart += $vgm[0x1e]<<16;
$loopstart += $vgm[0x1f]<<24;


define ("EOF",count($vgm));

$ticks=0;
$totalticks=0;
$longest=0;
$maxatbyte=0;

define ("HDRSIZE",16);
//$songdata=array(0,0,0xff);
$songdata=array_fill(0,HDRSIZE,0); // create an array 0..HDRSIZE of zeros
$songdata[2] = 0xff; // set the "bank" value of the loop pointer to FF (no loop by default)
$ymbuffer=array();

$bytes=0;

$notecount=array();
$notecount[0x54]=0;
$notecount[0xbd]=0;
$notecount[0x55]=0;
$notecount[0xa5]=0;

$errors=array();

// A B C freqs, ENV period, Voice Enable byte
$ayshadow = array (
	array(0, 0, 0, 0, 0x3f),
	array(0, 0, 0, 0, 0x3f)
);

$psgshadow = array(
	'lo' => array(0,0,0,0,0,0), // lo freqs for 6 channels of PSG
	'hi' => array(0,0,0,0,0,0), // hi freqs for 6 channels of PSG
	'v'  => array(0,0,0)	// volumes for 3 channels (excluding L/R bits)
);

$snlatch = array( 0,0,0,0 ); // tone LSB for A, B, C and the current reg latch
$sninitialized = false;
$cityconpatchfix = false;

while ($i < EOF) {
  $cmd = $vgm[$i];
  $i++;
  switch ($cmd) {
  case 0x50: // PSG - i.e.: Ti SN76489
	$d = $vgm[$i];
	$i++;
	translate_sn($d);
	break;
  case 0x54: // YM2151 chip
	$a = $vgm[$i];
	$d = $vgm[$i+1];
	$i += 2;
	//printf("[%6x] {%5d} YM A:%2x D:%2x\n",$i-3,$ticks,$a,$d);
	if ($a == 0x14) { $d = $d & 0xf3; } // filter out IRQ enable bits
	generate(1,$a,$d);
	$notecount[$cmd]++;
	break;
  case 0xa5: // second YM2203 chip
  case 0x55: // YM2203 chip
	$a = $vgm[$i];
	$d = $vgm[$i+1];
	$i += 2;
	if ($cmd == 0x55) { translate_opn($a,$d,0,$i-3); }
	else { translate_opn($a,$d,3,$i-3); }
	$notecount[$cmd]++;
	break;
  case 0x52: // YM2612 - first bank of FM voices / PSG
  case 0x53: // YM2612 - second bank of 3 FM voices
	if ($cmd == 0x52) { $base = 0; }
	else { $base = 3; }
	$ignore = false;
	$a = $vgm[$i];
	$d = $vgm[$i+1];
	$i += 2;
	switch ($a) { // handle special cases for OPN2 support....
	case 0x22: // LFO
printf ("2612LFO: reg 0x22 written with value 0x%02x\n",$d);
		$ignore = true;
		// LFO speeds: 3.98, 5.56, 6.02, 6.37,
		//             6.88, 9.63, 48.1, 72.2
		$lfotable = array ( 0xc2, 0xca, 0xcc, 0xce,
							0xd0, 0xd7, 0xfc, 0xff );
		if (($d & 0x08) > 0) { $d = $lfotable[$d & 0x07]; }
		else { $d = 0; }
		$a = 0x18;
printf ("2612LFO: calling generate: a=0x%02x d=0x%02x\n",$a,$d);
		generate(1,$a,$d);
		generate(1,0x19,0xff);
		generate(1,0x19,0x7f);
		break;
	case 0xb4:
	case 0xb5:
	case 0xb6: // b4-6 = LFO sensitivity. Ignoring for now
		$cha = $base + $a - 0xb4;
		$ams = ($d & 0x30) >> 4;
		$pms = ($d & 0x07) << 4;
		$d = $ams | $pms;
		generate(1,$cha + 0x38,$d);
		$ignore = true;
		break;
	case 0x2a: // DAC data write
	case 0x2b: // DAC enable
		$ignore = true;
		break;
case 0xb0:
case 0xb1:
case 0xb2:
printf ("====> CON debug: cmd=0x%02x base=%d VGM values: 0x%02x 0x%02x (byte 0x%06x)\n",$cmd,$base,$a,$d,$i-3);
break;
	case 0x28: // keyon/off register for 2612 is same for all 6 voices
		if (($d & 0x0f) > 3) {
			$base = 3;
			$d -= 4;
		}
		break;
	}
	if ($ignore === false) { translate_opn($a,$d,$base,$i-3); }
	//$notecount[$cmd]++;
	break;
  case 0xa0: // AY8910 chip
    $a = $vgm[$i];
    $d = $vgm[$i+1];
    $i += 2;
    translate_ay($a,$d,1);
    break;
  case 0x61:
	$t = $vgm[$i] | ( $vgm[$i+1] << 8 );
	$i += 2;
	//printf("[%6x] {%5d} pause %d ticks\n",$i-3,$ticks,$t);
	wait($t);
	break;
  case 0x62:
	//printf("[%6x] {%5d} pause 735 ticks (NTSC frame pause)\n",$i-1,$ticks);
	wait(735);
	break;
  case 0x63:
	//printf("[%6x] {%5d} pause 882 ticks (PAL frame pause)\n",$i-1,$ticks);
	wait(882);
	break;
  case 0x66:
	$i=EOF;
	break;
  case 0x67:
	$t = $i-1; // store the address of the command before skipping data
	$i+=2;
	$datasize=$vgm[$i] | $vgm[$i+1]<<8 | $vgm[$i+2]<<16 | $vgm[$i+3]<<24;
	$i += $datasize + 4;
	printf("[%6x] Data block (%4x)\n",$t,$datasize);
	break;
  case 0x4F:	// Sega GameGear PCM stereo write (one-byte operand)
	$i+=1; 		// (skip)
	break;
  case 0xB5:  // Ignore common PCM chip writes.
  case 0xB6:
  case 0xB7:
  case 0xB8:
  case 0xB9:
  case 0xBA:
  case 0xBB:
  case 0xBC:
  case 0xBD: // SAA1099 chip
  case 0xBE:
  case 0xBF:
	//printf("[%6x] {%5d} Ignore command %2x\n",$i-1,$ticks,$cmd);
  	$i += 2;
  	break;
  // ignore Sega Megadrive DAC commands
  case 0x80:
  case 0x81:
  case 0x82:
  case 0x83:
  case 0x84:
  case 0x85:
  case 0x86:
  case 0x87:
  case 0x88:
  case 0x89:
  case 0x8A:
  case 0x8B:
  case 0x8C:
  case 0x8D:
  case 0x8E:
  case 0x8F:
	wait($cmd & 0x0f);
	break;
  case 0xe0: // Set Sega DAC data block pointer
	$i += 4; // (skip)
	break;
  // skip commands with 3-byte operands
  case 0xc0: // Ignore Sega PCM commands.
  case 0xc1:
  case 0xc2:
  case 0xc3:
  case 0xc4:
  case 0xc5:
  case 0xc6:
  case 0xc7:
  case 0xc8:
  case 0xd0:
  case 0xd1:
  case 0xd2:
  case 0xd3:
  case 0xd4:
  case 0xd5:
  case 0xd6:
	//printf("[%6x] {%5d} Ignore command %2x\n",$i-1,$ticks,$cmd);
	$i += 3;
	break;
  case 0x70:
  case 0x71:
  case 0x72:
  case 0x73:
  case 0x74:
  case 0x75:
  case 0x76:
  case 0x77:
  case 0x78:
  case 0x79:
  case 0x7a:
  case 0x7b:
  case 0x7c:
  case 0x7d:
  case 0x7e:
  case 0x7f:
	$t = ( $cmd & 0x0f ) + 1;
	//printf("[%6x] {%5d} pause %d ticks (cmd 7x)\n",$i-1,$ticks,$t);
  	wait($t);
	break;
  case 0x66:
	// End of sound data
	$i = EOF;
	break;
  default:
	//array_push($errors, sprintf ("[%6x] : Unknown command (%2x)\n",$i-1,$cmd));
printf ("[%6x] : Unknown command (%2x)\n",$i-1,$cmd);
	break;
  }; // end of switch()
  if ((sizeof($ymbuffer)%2) != 0) { print "WTF???"; exit; }
  if ($i == $loopstart) {
	  flushymbuffer();
	  writepause();
	  // note: the loop offset pointer in the header is relative to start-of-file, not start-of-data
	  $songdata[2] = intdiv(($bytes+HDRSIZE),0x2000); // how many 8K banks into the tune is the loop point
	  $songdata[0] = (($bytes+HDRSIZE) % 0x2000) & 0xff;
	  $songdata[1] = ((($bytes+HDRSIZE) % 0x2000) >> 8) & 0xff;
  }
};
flushymbuffer(); // call separately just in case there is a buffer and not enough time remaining for a final delay command...
writepause(); // clear remaining delay amount so loop doesn't stutter
array_push($songdata,0x80);

print "; ".$notecount[0x54]." YM2151 messages\n";
print "; ".$notecount[0xbd]." SAA1099 messages\n";
print "; $totalticks total ticks\n\n";
print "; $ticks remaining ticks at end of data\n";

foreach ( $errors as $message ) { print "; $message"; };

if(1==2) {
print "DONE - total time ticks = $totalticks\n";
print "     - longest pause    = $longest\n";
printf("                        @ 0x%4x\n",$maxatbyte);
};

out_zsm(OUTFILENAME);
//out_asm();
print "; $bytes bytes of data\n";
print "; $num_maxpause MAXPAUSE frames\n";
print "; $biggest_pause = longest pause frame\n";
?>
